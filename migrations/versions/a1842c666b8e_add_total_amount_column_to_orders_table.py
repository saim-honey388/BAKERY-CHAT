"""Add total_amount column to orders table

Revision ID: a1842c666b8e
Revises: 
Create Date: 2025-08-27 03:09:44.158415

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a1842c666b8e'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # For SQLite, we'll add the column as nullable and populate it
    # SQLite doesn't support ALTER COLUMN to change nullability easily
    op.add_column('orders', sa.Column('total_amount', sa.Float(), nullable=True))
    
    # Calculate and populate total_amount for existing orders
    connection = op.get_bind()
    
    # Get all existing orders and calculate their totals
    result = connection.execute(sa.text("""
        SELECT o.id, COALESCE(SUM(oi.quantity * oi.price_at_time_of_order), 0) as calculated_total
        FROM orders o
        LEFT JOIN order_items oi ON o.id = oi.order_id
        GROUP BY o.id
    """))
    
    # Update each order with its calculated total
    for order_id, calculated_total in result:
        connection.execute(sa.text("""
            UPDATE orders
            SET total_amount = :total
            WHERE id = :order_id
        """), {"total": calculated_total, "order_id": order_id})
    
    # Note: For SQLite, we keep the column nullable but ensure all records have values
    # New orders will be created with total_amount values from the application code


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('orders', 'total_amount')
    # ### end Alembic commands ###
